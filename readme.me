Automated Physiotherapy Room Scheduler1. Project OverviewThis project is a Google Apps Script application designed to fully automate the monthly staff scheduling process for a hospital's physiotherapy room. The system reads staff availability, vacation requests, and a complex set of user-defined rules from a Google Sheet. It then generates a fair, balanced, and rule-compliant monthly schedule, writing the final output back to the same Google Sheet.The core objective is to create a robust, state-aware algorithm that minimizes the need for manual corrections by building balancing and fairness logic directly into the generation process.2. System ComponentsThe system consists of two primary components that work in tandem:The Google Sheet (물리치료실 스케쥴표): Acts as the central database and user interface for the entire system. All inputs, outputs, and configurations are managed here.The Google Apps Script Codebase: Contains the business logic for reading the data, applying the rules, and generating the schedule.3. The Google Sheet Data HubThe Google Sheet is the single source of truth. Understanding each tab is critical.Sheet NamePurposeKey Information⚙️설정 (Settings)The "Brain" of the Scheduler.A2:A: Staff ListE2:H: Shift Definitions (all valid codes)J2:L: Rules (all operational logic)⭐근무표 (Schedule)Primary Output.B1/C1: Target Year/MonthF3+: Grid for the final generated schedule.⛱️휴가신청 (Vacations)Input for Absences.Reads requests with status 승인 (Approved).📅캘린더 (Calendar)Input for Holidays.Defines 공휴일 (Holiday) and 병원휴무일 (Hospital Shutdown Day).📈로그 (Log)Debugging Output.All script operations and errors are logged here.4. The Google Apps Script ArchitectureThe codebase is refactored into a modular, testable, and easy-to-understand structure.Core_Main.gs: The main entry point. Creates the custom menu and calls the Orchestrator.Engine_Schedule_Orchestrator.gs: The "manager" of the scheduling process. It controls the high-level workflow:Initializes the data context (creates rich profiles for staff and days).Calculates monthly targets for hours and OFF days.Applies "pre-constraints" (non-negotiable assignments like 휴가 and Golden Weekend OFFs).Delegates the main assignment task to the AssignmentEngine.Writes the final, completed schedule to the sheet.Engine_Schedule_Assignment.gs: The "specialist" worker. Contains the logic for the main, day-by-day generation loop, using a scoring system to intelligently assign the best-fit work shifts and remaining OFF days.Service_Sheet.gs: A dedicated data layer responsible for all read/write operations with the Google Sheet.Service_Logger.gs: Manages the collection and writing of log messages.Service_Debug.gs: A comprehensive testing framework that allows for running the scheduling process in distinct stages, with rich logging and visual feedback.Util_Date.gs: A small helper for date-related functions.5. Current Status & Immediate TasksThe project has a solid foundation, but several key features are not yet implemented. An AI agent should focus on the following issues to complete the scheduler.Current StatusThe 5-stage testing framework is operational and provides rich, visual debugging feedback.The system correctly initializes data, creates rich profiles, calculates targets, and applies pre-constraints (휴가, Golden Weekend).The main generation loop successfully fills the entire schedule.⚠️ Immediate Tasks & Known IssuesImplement On-Call (당직) Scheduling:Problem: The OC10 shift is defined in ⚙️설정, but there is no logic anywhere in the script to assign it. This is the highest-priority missing feature.Required Action: A new stage needs to be added to the scheduling process, likely after the main generation loop. This stage will iterate through the schedule and assign OC10 shifts on days where they are required (oncall_required_weekday/weekend rules), replacing a staff member's regular shift. The logic must respect the consecutive_oncall_days_max rule.Implement Final Balancing and Validation:Problem: The current main loop lacks a final "post-processing" step. This can result in some staff members being slightly over or under their target hours.Required Action: A new "post-processing" stage should be added. This stage would scan the completed schedule and make small, intelligent swaps (e.g., changing a D8 to a D6 for one person and the reverse for another) to bring everyone's total hours closer to their targets without violating any rules.Enforce Paired Weekend Work Rule:Problem: The rule enforce_paired_weekend_work exists in the settings sheet, but the AssignmentEngine does not currently check or enforce it. A staff member could be assigned to work on both Saturday and Sunday of the same weekend.Required Action: The logic in Engine_Schedule_Assignment.gs must be upgraded. When considering a staff member for a weekend work shift, it must check if they are already working on the other day of that same weekend and, if the rule is enabled, avoid assigning them to work both days.
